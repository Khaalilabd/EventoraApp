package Gui.Pack.Controllers;

import Models.Pack.Location;
import Models.Pack.Pack;
import Models.Pack.Evenement;
import Models.Service.Service;
import Services.Pack.Crud.PackService;
import Services.Service.Crud.ServiceService;
import Services.Utilisateur.Crud.MembresService;
import com.postmarkapp.postmark.client.AccountApiClient;
import com.postmarkapp.postmark.Postmark;
import com.postmarkapp.postmark.client.data.model.Message;
import com.postmarkapp.postmark.client.exception.PostmarkException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import org.controlsfx.control.CheckComboBox;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class AjouterPack {

    @FXML
    private TextField NomPackField;
    @FXML
    private TextArea DescriptionField;
    @FXML
    private TextField PrixField;
    @FXML
    private ComboBox<Location> LocationField;
    @FXML
    private ComboBox<Evenement> TypeField;
    @FXML
    private TextField NbrGuestsField;
    @FXML
    private CheckComboBox<Service> ServiceField;
    @FXML
    private Button submitButton;
    @FXML
    private Button cancelButton;
    @FXML
    private Button ReturnToListButton;

    private final PackService packService = new PackService();
    private final ServiceService serviceService = new ServiceService();
    private final MembresService membresService = new MembresService();
    private final AccountApiClient postmarkClient = Postmark.getApiClient(System.getenv("POSTMARK_API_TOKEN"));

    @FXML
    public void initialize() {
        LocationField.getItems().setAll(Location.values());
        List<Evenement> evenements = packService.getAllEvenements();
        ObservableList<Evenement> observableEvenements = FXCollections.observableArrayList(evenements);
        TypeField.setItems(observableEvenements);
        List<Service> services = serviceService.RechercherService();
        ObservableList<Service> observableServices = FXCollections.observableArrayList(services);
        ServiceField.getItems().addAll(observableServices);
        ServiceField.setConverter(new javafx.util.StringConverter<Service>() {
            @Override
            public String toString(Service service) {
                return service != null ? service.getTitre() : "";
            }
            @Override
            public Service fromString(String string) {
                return null;
            }
        });
        ServiceField.setTitle("Sélectionner les services");

        submitButton.setOnAction(this::ajouterPack);
        cancelButton.setOnAction(this::annuler);
        ReturnToListButton.setOnAction(this::goToAffichePack);
    }

    @FXML
    private void ajouterPack(ActionEvent event) {
        // Step 1: Validate input (no SQLException can be thrown here)
        String nomPack = NomPackField.getText().trim();
        String description = DescriptionField.getText();
        String prixText = PrixField.getText();
        Location location = LocationField.getValue();
        Evenement type = TypeField.getValue();
        String nbrGuestsText = NbrGuestsField.getText();
        ObservableList<Service> selectedServices = ServiceField.getCheckModel().getCheckedItems();

        // Validation: Check for empty fields
        if (nomPack.isEmpty() || description.isEmpty() || prixText.isEmpty() || location == null || type == null || nbrGuestsText.isEmpty() || selectedServices.isEmpty()) {
            showAlert("Erreur", "Tous les champs doivent être remplis, y compris au moins un service.");
            return;
        }

        // Validation: Check if nomPack already exists (this does NOT throw SQLException)
        int existingPackId = packService.getIdPackByNom(nomPack);
        if (existingPackId == -1) {
            showAlert("Erreur", "Erreur lors de la vérification de l'existence du pack. Veuillez vérifier les logs.");
            return;
        }
        if (existingPackId != -1) {
            showAlert("Erreur", "Un pack avec le nom '" + nomPack + "' existe déjà ! Veuillez choisir un autre nom.");
            return;
        }

        // Validate numeric fields (can throw NumberFormatException)
        double prix;
        int nbrGuests;
        try {
            prix = Double.parseDouble(prixText);
            nbrGuests = Integer.parseInt(nbrGuestsText);
        } catch (NumberFormatException e) {
            showAlert("Erreur", "Veuillez entrer des valeurs numériques valides pour le prix et le nombre d'invités.");
            return;
        }

        // Step 2: Create the pack (cannot throw SQLException)
        Pack newPack = new Pack(nomPack, description, prix, location, type, nbrGuests, new ArrayList<>(selectedServices));

        // Step 3: Save the pack (can throw SQLException)
        try {
            packService.ajouter(newPack);
        } catch (SQLException e) {
            if (e.getMessage().contains("Un pack avec le nom")) {
                showAlert("Erreur", e.getMessage());
            } else {
                showAlert("Erreur", "Une erreur est survenue lors de l'ajout du pack : " + e.getMessage());
                e.printStackTrace();
            }
            return;
        }

        // Step 4: Send email notifications (can throw PostmarkException, IOException)
        try {
            boolean emailSentSuccessfully = sendEmailNotificationToUsers(nomPack);
            if (!emailSentSuccessfully) {
                showAlert("Avertissement", "Pack ajouté, mais une erreur est survenue lors de l'envoi des notifications par email. Veuillez vérifier les logs.");
            }
        } catch (Exception e) {
            showAlert("Avertissement", "Pack ajouté, mais une erreur est survenue lors de l'envoi des notifications par email : " + e.getMessage());
            e.printStackTrace();
        }

        showAlert("Succès", "Pack ajouté avec succès !");
        goToAffichePack(event);
    }

    private boolean sendEmailNotificationToUsers(String nomPack) {
        // Fetch all user emails
        List<String> userEmails = membresService.getAllUserEmails();
        if (userEmails.isEmpty()) {
            System.out.println("Aucune utilisateur trouvé pour envoyer des notifications.");
            return true;
        }

        // Configure Postmark email details
        String fromEmail = "your-verified-email@example.com"; // Replace with your verified sender email
        String subject = "Nouveau Pack Ajouté : " + nomPack;
        String htmlContent = "<h1>Nouveau Pack Ajouté : " + nomPack + "</h1>" +
                "<p>Un nouveau pack nommé '" + nomPack + "' a été ajouté à notre application.</p>" +
                "<p>Allez le découvrir dès maintenant sur la plateforme Eventora !</p>" +
                "<p>Cordialement,<br>L'équipe Eventora</p>";
        String textContent = "Un nouveau pack nommé '" + nomPack + "' a été ajouté à notre application ! " +
                "Allez le découvrir dès maintenant sur notre plateforme.\n\n" +
                "Cordialement,\nL'équipe Eventora";

        // Send email to each user
        boolean allEmailsSentSuccessfully = true;
        for (String toEmail : userEmails) {
            Message message = new Message();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject(subject);
            message.setText(textContent);
            message.setHtml(htmlContent); // Set HTML content for better formatting
            message.setMessageStream("outbound"); // Specify the message stream

            try {
                postmarkClient.sendEmail(message);
                System.out.println("Email envoyé à " + toEmail);
            } catch (PostmarkException | IOException ex) {
                System.out.println("Erreur lors de l'envoi de l'email à " + toEmail + " : " + ex.getMessage());
                allEmailsSentSuccessfully = false;
            }
        }
        return allEmailsSentSuccessfully;
    }

    @FXML
    private void annuler(ActionEvent event) {
        clearFields();
    }

    private void clearFields() {
        NomPackField.clear();
        DescriptionField.clear();
        PrixField.clear();
        LocationField.setValue(null);
        TypeField.setValue(null);
        NbrGuestsField.clear();
        ServiceField.getCheckModel().clearChecks();
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void goToAffichePack(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/Pack/AffichePack.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            showAlert("Erreur", "Impossible de charger la page AffichePack.");
            e.printStackTrace();
        }
    }

    @FXML
    private void goToPack(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Pack/Packs.fxml"));
        AnchorPane packLayout = loader.load();
        Scene scene = new Scene(packLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void goToFeedback(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reclamation/Feedback.fxml"));
        AnchorPane feedbackLayout = loader.load();
        Scene feedbackScene = new Scene(feedbackLayout);
        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        currentStage.setScene(feedbackScene);
        currentStage.show();
    }

    @FXML
    private void goToReclamation(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reclamation/Reclamation.fxml"));
        AnchorPane reclamationLayout = loader.load();
        Scene scene = new Scene(reclamationLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void goToReservation(ActionEvent event) throws IOException {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reservation/Reservation.fxml"));
            AnchorPane reservationLayout = loader.load();
            Scene scene = new Scene(reservationLayout);
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Erreur lors du chargement de Reservation.fxml : " + e.getMessage());
        }
    }

    @FXML
    private void goToService(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Service/Service.fxml"));
        Parent root = loader.load();
        Scene newScene = new Scene(root);
        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        currentStage.close();
        Stage newStage = new Stage();
        newStage.setScene(newScene);
        newStage.show();
    }
}