package Gui.Reclamation.Controllers;

import Services.Reclamation.Crud.ReclamationService;
import Models.Reclamation.Reclamation;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import javafx.util.Callback;

import java.io.IOException;
import java.util.List;

public class AfficheRec {

    @FXML
    private TableView<Reclamation> tableView;

    @FXML
    private TableColumn<Reclamation, Integer> colId;

    @FXML
    private TableColumn<Reclamation, String> colTitre;

    @FXML
    private TableColumn<Reclamation, String> colDescription;

    @FXML
    private TableColumn<Reclamation, String> colType;

    @FXML
    private TableColumn<Reclamation, String> colActions;

    private ReclamationService reclamationService;

    public AfficheRec() {
        this.reclamationService = new ReclamationService();
    }

    @FXML
    public void initialize() {
        colId.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()).asObject());
        colTitre.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getTitre()));
        colDescription.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getDescription()));
        colType.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getType().getLabel()));

        addActionsColumn();
        loadReclamations();
    }

    private void loadReclamations() {
        List<Reclamation> reclamations = reclamationService.RechercherRec();
        tableView.getItems().setAll(reclamations);
    }

    private void addActionsColumn() {
        colActions.setCellValueFactory(cellData -> new SimpleStringProperty("Actions"));

        colActions.setCellFactory(new Callback<TableColumn<Reclamation, String>, TableCell<Reclamation, String>>() {
            @Override
            public TableCell<Reclamation, String> call(TableColumn<Reclamation, String> param) {
                return new TableCell<Reclamation, String>() {
                    final Button editButton = new Button();
                    final Button deleteButton = new Button();
                    final HBox hBox = new HBox(10);

                    {
                        // Chargement des icônes dans les boutons
                        Image editIcon = new Image(getClass().getResourceAsStream("/Images/modif.png"));
                        Image deleteIcon = new Image(getClass().getResourceAsStream("/Images/supp.png"));

                        // Icônes pour les boutons
                        ImageView editImageView = new ImageView(editIcon);
                        ImageView deleteImageView = new ImageView(deleteIcon);

                        editImageView.setFitHeight(20);
                        editImageView.setFitWidth(20);
                        deleteImageView.setFitHeight(20);
                        deleteImageView.setFitWidth(20);

                        // Ajout des icônes dans les boutons
                        editButton.setGraphic(editImageView);
                        deleteButton.setGraphic(deleteImageView);

                        // Style des boutons
                        editButton.getStyleClass().add("table-button");
                        deleteButton.getStyleClass().addAll("table-button", "delete");

                        hBox.getChildren().addAll(editButton, deleteButton);
                    }

                    @Override
                    public void updateItem(String item, boolean empty) {
                        super.updateItem(item, empty);
                        if (empty) {
                            setGraphic(null);
                        } else {
                            editButton.setOnAction(event -> handleEdit(getTableRow().getItem()));
                            deleteButton.setOnAction(event -> handleDelete(getTableRow().getItem()));
                            setGraphic(hBox);
                        }
                    }
                };
            }
        });
    }

    private void handleEdit(Reclamation reclamation) {
        try {
            // Charger l'interface ModifRec.fxml
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/ModifierRec.fxml"));
            AnchorPane modifRecLayout = loader.load();

            // Passer la réclamation à l'interface ModifRec
            ModifierRec controller = loader.getController();
            controller.setReclamationToEdit(reclamation);  // Utilisation de setReclamationToEdit()

            // Récupérer la fenêtre actuelle et remplacer son contenu par le layout de modification
            Scene currentScene = tableView.getScene();
            currentScene.setRoot(modifRecLayout);  // Remplacer le root de la scène par le layout ModifRec
        } catch (IOException e) {
            e.printStackTrace();
        }
    


}

    private void handleDelete(Reclamation reclamation) {
        System.out.println("Supprimer la réclamation avec ID : " + reclamation.getId());
        reclamationService.SupprimerRec(reclamation);
        loadReclamations();  // Recharger la liste des réclamations après suppression
    }

    @FXML
    private void addReclamation() throws IOException {
        // Charger l'interface AjouterRec.fxml
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/AjouterRec.fxml"));
        Scene scene = new Scene(loader.load());
        Stage stage = new Stage();
        stage.setScene(scene);
        stage.setTitle("Ajouter une réclamation");
        stage.show();
    }

    @FXML
    private void refreshList() {
        loadReclamations();  // Recharger les réclamations
    }

    @FXML
    private void tableRowFactory(TableView<Reclamation> tableView) {
        tableView.setRowFactory(tv -> {
            TableRow<Reclamation> row = new TableRow<>();
            row.setOnMouseEntered(event -> row.setStyle("-fx-background-color: #BDC3C7;"));
            row.setOnMouseExited(event -> row.setStyle("-fx-background-color: transparent;"));
            return row;
        });
    }

    @FXML
    private void goToReclamation(ActionEvent event) throws IOException {
        // Charger l'interface Reclamation.fxml
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reclamation.fxml"));
        AnchorPane reclamationLayout = loader.load();
        Scene scene = new Scene(reclamationLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }
}
