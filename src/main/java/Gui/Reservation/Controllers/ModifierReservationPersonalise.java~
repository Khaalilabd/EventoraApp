package Gui.Reservation.Controllers;

import Models.Reservation.ReservationPersonalise;
import Models.Service.Service;
import Services.Reservation.Crud.ReservationPersonaliseService;
import Services.Service.Crud.ServiceService;
import javafx.animation.PauseTransition;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class ModifierReservationPersonalise {
    @FXML
    private VBox serviceCheckboxes;
    @FXML
    private TextField nomfield;
    @FXML
    private TextField prenomfield;
    @FXML
    private TextField emailfield;
    @FXML
    private TextField numtelfield;
    @FXML
    private TextArea descriptionfield;
    @FXML
    private DatePicker datefield;
    @FXML
    private Button submitButton;
    @FXML
    private Button cancelButton;
    @FXML
    private VBox successBanner; // Add banner
    @FXML
    private Label bannerMessage; // Add banner message

    private final ReservationPersonaliseService reservationService = new ReservationPersonaliseService();
    private final ServiceService serviceService = new ServiceService();
    private final HttpClient httpClient = HttpClient.newHttpClient();
    private ReservationPersonalise reservationToEdit;

    @FXML
    public void initialize() {
        submitButton.setOnAction(this::modifierReservationPersonalise);
        cancelButton.setOnAction(event -> annuler());
        loadServicesAsCheckboxes();

        // Désactiver les dates passées dans le DatePicker
        datefield.setDayCellFactory(picker -> new DateCell() {
            @Override
            public void updateItem(LocalDate date, boolean empty) {
                super.updateItem(date, empty);
                setDisable(empty || date.isBefore(LocalDate.now()));
            }
        });
    }

    private void loadServicesAsCheckboxes() {
        List<Service> services = serviceService.RechercherService();
        for (Service service : services) {
            CheckBox checkBox = new CheckBox(service.getTitre());
            checkBox.setUserData(service.getId());
            serviceCheckboxes.getChildren().add(checkBox);
        }
    }

    public void setReservationToEdit(ReservationPersonalise reservation) {
        this.reservationToEdit = reservation;

        // Pré-remplir les champs avec les données existantes
        nomfield.setText(reservation.getNom());
        prenomfield.setText(reservation.getPrenom());
        emailfield.setText(reservation.getEmail());
        numtelfield.setText(reservation.getNumtel());
        descriptionfield.setText(reservation.getDescription());

        Date date = reservation.getDate();
        if (date != null) {
            LocalDate localDate;
            if (date instanceof java.sql.Date) {
                localDate = ((java.sql.Date) date).toLocalDate();
            } else {
                localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }
            datefield.setValue(localDate);
        } else {
            datefield.setValue(null);
        }

        // Pré-cocher les services associés à la réservation
        List<Integer> selectedServiceIds = reservation.getServiceIds();
        for (Node node : serviceCheckboxes.getChildren()) {
            if (node instanceof CheckBox checkBox) {
                int serviceId = (Integer) checkBox.getUserData();
                checkBox.setSelected(selectedServiceIds.contains(serviceId));
            }
        }
    }

    @FXML
    private void modifierReservationPersonalise(ActionEvent event) {
        if (!validateFields()) return;

        // Récupérer les services sélectionnés
        List<Integer> selectedServiceIds = new ArrayList<>();
        for (Node node : serviceCheckboxes.getChildren()) {
            if (node instanceof CheckBox checkBox && checkBox.isSelected()) {
                selectedServiceIds.add((Integer) checkBox.getUserData());
            }
        }

        if (selectedServiceIds.isEmpty()) {
            showAlert("Erreur", "Veuillez sélectionner au moins un service !");
            return;
        }

        // Mettre à jour l'objet reservationToEdit avec les nouvelles valeurs
        reservationToEdit.setNom(nomfield.getText().trim());
        reservationToEdit.setPrenom(prenomfield.getText().trim());
        reservationToEdit.setEmail(emailfield.getText().trim());
        reservationToEdit.setNumtel(numtelfield.getText().trim());
        reservationToEdit.setDescription(descriptionfield.getText().trim());
        reservationToEdit.setDate(Date.from(datefield.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        reservationToEdit.setServiceIds(selectedServiceIds);

        // Modifier la réservation
        ReservationPersonalise updatedReservation = reservationService.modifierReservationPersonalise(reservationToEdit);
        if (updatedReservation != null) {
            // Send email notification
            sendReservationModificationEmail(updatedReservation);
            showSuccessBanner("Réservation modifiée avec succès ! Un email de confirmation a été envoyé.");
            clearFields();
            goToReservationListePersonalise();
        } else {
            showAlert("Erreur", "Échec de la modification de la réservation.");
        }
    }

    private boolean validateFields() {
        if (nomfield.getText().trim().isEmpty() || prenomfield.getText().trim().isEmpty() ||
                emailfield.getText().trim().isEmpty() || numtelfield.getText().trim().isEmpty() ||
                descriptionfield.getText().trim().isEmpty() || datefield.getValue() == null) {
            showAlert("Erreur", "Tous les champs doivent être remplis !");
            return false;
        }
        if (!emailfield.getText().toLowerCase().endsWith("@esprit.tn")) { // Restrict to @esprit.tn
            showAlert("Erreur", "Seuls les emails se terminant par @esprit.tn sont autorisés !");
            return false;
        }
        if (!emailfield.getText().matches("^[A-Za-z0-9+_.-]+@esprit\\.tn$")) {
            showAlert("Erreur", "Adresse email invalide !");
            return false;
        }
        if (!numtelfield.getText().matches("\\d{8}")) {
            showAlert("Erreur", "Le numéro de téléphone doit contenir exactement 8 chiffres !");
            return false;
        }
        if (datefield.getValue().isBefore(LocalDate.now())) {
            showAlert("Erreur", "La date ne peut pas être dans le passé !");
            return false;
        }
        return true;
    }

    private void annuler() {
        clearFields();
    }

    private void clearFields() {
        nomfield.clear();
        prenomfield.clear();
        emailfield.clear();
        numtelfield.clear();
        descriptionfield.clear();
        datefield.setValue(null);
        serviceCheckboxes.getChildren().forEach(node -> {
            if (node instanceof CheckBox checkBox) checkBox.setSelected(false);
        });
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.getDialogPane().getStylesheets().add(getClass().getResource("/alert-style.css").toExternalForm());
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }

    private void showSuccessBanner(String message) {
        bannerMessage.setText(message);
        successBanner.setVisible(true);
        successBanner.setManaged(true);
        successBanner.requestLayout();

        PauseTransition delay = new PauseTransition(Duration.seconds(3));
        delay.setOnFinished(event -> {
            successBanner.setVisible(false);
            successBanner.setManaged(false);
        });
        delay.play();
    }

    private void sendReservationModificationEmail(ReservationPersonalise reservation) {
        String apiToken = System.getenv("POSTMARK_API_TOKEN");
        if (apiToken == null || apiToken.trim().isEmpty()) {
            showAlert("Erreur", "POSTMARK_API_TOKEN environment variable is not set or empty.");
            return;
        }

        String toEmail = reservation.getEmail().toLowerCase();
        if (!toEmail.endsWith("@esprit.tn")) {
            showAlert("Erreur", "L'email doit se terminer par @esprit.tn pour l'envoi !");
            return;
        }

        String fromEmail = "khalil.abdelmoumen@esprit.tn";
        String subject = "Modification de votre réservation - Eventora";
        String htmlContent = "<h1>Modification de votre réservation</h1>" +
                "<p>Bonjour " + reservation.getNom() + " " + reservation.getPrenom() + ",</p>" +
                "<p>Votre réservation personnalisée a été modifiée avec succès.</p>" +
                "<p><strong>Détails de la réservation :</strong></p>" +
                "<ul>" +
                "<li>Nom : " + reservation.getNom() + "</li>" +
                "<li>Prénom : " + reservation.getPrenom() + "</li>" +
                "<li>Email : " + reservation.getEmail() + "</li>" +
                "<li>Téléphone : " + reservation.getNumtel() + "</li>" +
                "<li>Description : " + reservation.getDescription() + "</li>" +
                "<li>Date : " + reservation.getDate() + "</li>" +
                "<li>Services : " + reservation.getServiceIds() + "</li>" +
                "</ul>" +
                "<p>Si vous avez des questions, n’hésitez pas à nous contacter.</p>" +
                "<p>Meilleures salutations,<br>L’équipe Eventora</p>";
        String textContent = "Bonjour " + reservation.getNom() + " " + reservation.getPrenom() + ",\n\n" +
                "Votre réservation personnalisée a été modifiée avec succès.\n" +
                "Détails de la réservation :\n" +
                "- Nom : " + reservation.getNom() + "\n" +
                "- Prénom : " + reservation.getPrenom() + "\n" +
                "- Email : " + reservation.getEmail() + "\n" +
                "- Téléphone : " + reservation.getNumtel() + "\n" +
                "- Description : " + reservation.getDescription() + "\n" +
                "- Date : " + reservation.getDate() + "\n" +
                "- Services : " + reservation.getServiceIds() + "\n" +
                "Si vous avez des questions, n’hésitez pas à nous contacter.\n\n" +
                "Meilleures salutations,\nL’équipe Eventora";

        String json = String.format(
                "{\"From\":\"%s\",\"To\":\"%s\",\"Subject\":\"%s\",\"TextBody\":\"%s\",\"HtmlBody\":\"%s\"}",
                escapeJsonString(fromEmail), escapeJsonString(toEmail), escapeJsonString(subject),
                escapeJsonString(textContent), escapeJsonString(htmlContent)
        );

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://api.postmarkapp.com/email"))
                .header("Accept", "application/json")
                .header("Content-Type", "application/json")
                .header("X-Postmark-Server-Token", apiToken)
                .POST(HttpRequest.BodyPublishers.ofString(json))
                .build();

        try {
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println("Postmark Response Status: " + response.statusCode());
            System.out.println("Postmark Response Body: " + response.body());
            if (response.statusCode() != 200) {
                showAlert("Erreur", "Échec de l'envoi de l'email : " + response.body());
            }
        } catch (Exception e) {
            showAlert("Erreur", "Échec de l'envoi de l'email : " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String escapeJsonString(String input) {
        if (input == null) return "";
        return input.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }

    @FXML
    private void goToReservation(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reservation/Reservation.fxml"));
        AnchorPane reservationLayout = loader.load();
        Scene scene = new Scene(reservationLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void goToReservationListePersonalise() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reservation/AfficherReservationPersonalise.fxml"));
            AnchorPane reservationLayout = loader.load();
            Scene scene = new Scene(reservationLayout);
            Stage stage = (Stage) submitButton.getScene().getWindow();
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    private void goToReclamation(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reclamation/Reclamation.fxml"));
        AnchorPane reclamationLayout = loader.load();
        Scene scene = new Scene(reclamationLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    @FXML
    private void goToFeedback(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Reclamation/Feedback.fxml"));
        AnchorPane feedbackLayout = loader.load();
        Scene feedbackScene = new Scene(feedbackLayout);
        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        currentStage.setScene(feedbackScene);
        currentStage.show();
    }

    @FXML
    private void goToService(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Service/Service.fxml"));
        Parent root = loader.load();
        Scene newScene = new Scene(root);
        Stage currentStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        currentStage.close();
        Stage newStage = new Stage();
        newStage.setScene(newScene);
        newStage.show();
    }

    @FXML
    private void goToPack(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Pack/Packs.fxml"));
        AnchorPane packLayout = loader.load();
        Scene scene = new Scene(packLayout);
        Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }
}