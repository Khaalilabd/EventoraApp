package Gui.Utilisateurs.Controllers;

import Models.Utilisateur.Utilisateurs;
import Services.Utilisateur.Crud.MembresService;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;

public class ResetPassword {

    @FXML
    private TextField emailField;
    @FXML
    private TextField tokenField;
    @FXML
    private PasswordField newPasswordField;
    @FXML
    private PasswordField confirmPasswordField;

    private final MembresService membresService = new MembresService();

    @FXML
    private void resetPassword(ActionEvent event) {
        String email = emailField.getText().trim();
        String token = tokenField.getText().trim();
        String newPassword = newPasswordField.getText().trim();
        String confirmPassword = confirmPasswordField.getText().trim();

        if (email.isEmpty() || token.isEmpty() || newPassword.isEmpty() || confirmPassword.isEmpty()) {
            afficherAlerte("Erreur", "Veuillez remplir tous les champs.");
            return;
        }

        if (!newPassword.equals(confirmPassword)) {
            afficherAlerte("Erreur", "Les mots de passe ne correspondent pas.");
            return;
        }

        Utilisateurs utilisateur = membresService.rechercherMemParEmail(email);
        if (utilisateur == null) {
            afficherAlerte("Erreur", "Email non trouvé.");
            return;
        }

        Utilisateurs validatedUser = membresService.validateResetToken(token);
        if (validatedUser == null || validatedUser.getId() != utilisateur.getId()) {
            afficherAlerte("Erreur", "Token invalide ou expiré.");
            return;
        }

        membresService.updatePassword(validatedUser, newPassword);
        afficherAlerte("Succès", "Mot de passe réinitialisé avec succès. Veuillez vous connecter.");
        goBackToLogin(event);
    }

    @FXML
    private void goBackToLogin(ActionEvent event) {
        changerScene(event, "/Utilisateurs/Authentification.fxml");
    }

    private void afficherAlerte(String titre, String message) {
        Alert alert = titre.equals("Erreur") ? new Alert(Alert.AlertType.ERROR) : new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(titre);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void changerScene(ActionEvent event, String cheminFXML) {
        try {
            Parent root = FXMLLoader.load(getClass().getResource(cheminFXML));
            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 1022, 687);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            afficherAlerte("Erreur", "Échec du chargement de la page : " + e.getMessage());
        }
    }
}